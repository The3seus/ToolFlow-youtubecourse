/**
 * src/tools/imageGenerator.ts
 *
 * Lesson 3: AI Image-Generator Agent
 * -----------------------------------
 * This tool wraps OpenAI’s DALL·E 3 endpoint, turning any text prompt into
 * one or more image URLs. Below, each section is annotated so you can walk
 * through the purpose and structure of a TFP tool.
 * 
 * Quick Test with curl

curl -X POST http://localhost:3000/tfp/invoke \
     -H "Content-Type: application/json" \
     -d '{
           "toolId":"image.generator.v1",
           "input":{
             "prompt":"A futuristic city skyline at sunset",
             "n":2,
             "size":"512x512"
           }
         }'

 */

/* ---------- 0. IMPORTS ---------- */

// Zod: runtime schema validation + compile-time TS types
import { z } from 'zod';

// TFP’s ToolDescriptor interface: metadata + schemas for discovery & validation
import { ToolDescriptor } from '../protocol/types';

// Official OpenAI SDK to call images.generate(...)
import OpenAI from 'openai';



/* ---------- 1. INPUT & OUTPUT SCHEMAS ---------- */

/**
 * inputSchema
 * -----------
 * Defines and validates the shape of the JSON the user sends to /tfp/invoke.
 * - `prompt`: The text description for DALL·E to render.
// - `n`: Number of images to generate (1–4).
 * - `size`: One of the allowed image dimensions.
 */
export const inputSchema = z.object({
  prompt: z.string(),                                            // required text
  n:      z.number().int().min(1).max(4).default(1),             // optional; defaults to 1
  size:   z.enum(['256x256','512x512','1024x1024']).default('1024x1024') 
});

/**
 * outputSchema
 * ------------
 * Validates what our handler returns back to the TFP server, ensuring
 * consistent API outputs and proper TypeScript types.
 * - `urls`: An array of image URLs generated by DALL·E.
 */
export const outputSchema = z.object({
  urls: z.array(z.string().url())
});



/* ---------- 2. TOOL DESCRIPTOR ---------- */

/**
 * descriptor
 * ----------
 * Metadata for the tool registry. TFP exposes this on GET /tfp/tools so
 * agents or UIs can discover available capabilities.
 *
 * Fields:
 * - `toolId`: unique identifier used when invoking
 * - `name`, `description`, `version`: human-readable info
 * - `inputSchema` / `outputSchema`: for automatic validation
 * - `tags`: search keywords for discovery
 */
export const descriptor: ToolDescriptor = {
  toolId:     'image.generator.v1',
  name:       'Image Generator',
  description:'Creates images with DALL·E 3 from a text prompt.',
  version:    '1.0.0',
  inputSchema,
  outputSchema,
  tags:       ['ai','image','dall-e']
};



/* ---------- 3. OPENAI CLIENT INITIALIZATION ---------- */

/**
 * openai
 * ------
 * Instantiate the OpenAI SDK client with the API key from environment.
 * This single client will be reused for all handler invocations.
 */
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});



/* ---------- 4. HANDLER FUNCTION ---------- */

/**
 * handler
 * -------
 * Core function called when /tfp/invoke arrives with toolId 'image.generator.v1'.
 * Steps:
 *  a) Extract and validate input against `inputSchema`.
 *  b) Call OpenAI’s images.generate endpoint.
 *  c) Safely extract image URLs, guarding against any null/undefined.
 *  d) Return an object matching `outputSchema`.
 *
 * @param input  Typed as { prompt: string; n: number; size: string }
 * @returns      { urls: string[] }
 */
export async function handler(input: z.infer<typeof inputSchema>) {
  // a) Invoke the DALL·E API
  const res = await openai.images.generate({
    prompt: input.prompt,    // the text prompt
    n:      input.n,         // how many images
    size:   input.size       // image resolution
  });

  // b) res.data is an array of objects { url?: string }
  //    Use optional chaining + filter(Boolean) to drop any nulls
  const urls = res.data
    ?.map(img => img.url)    // extract the .url field
    .filter(Boolean)         // remove undefined/null entries
    ?? [];                   // fallback to empty array if res.data is nullish

  // c) Return in the shape defined by outputSchema
  return { urls };
}
